# swagger_petstore
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SwaggerPetstore
  # An enum for SDK environments.
  class Environment
    ENVIRONMENT = [
      PRODUCTION = 'production'.freeze
    ].freeze
  end

  # An enum for API servers.
  class Server
    SERVER = [
      SERVER1 = 'server1'.freeze,
      SERVER2 = 'server2'.freeze,
      AUTH_SERVER = 'auth server'.freeze
    ].freeze
  end

  # All configuration including auth info and base URI for the API access
  # are configured in this class.
  class Configuration < CoreLibrary::HttpClientConfiguration
    # The attribute readers for properties.
    attr_reader :environment, :o_auth_client_id, :o_auth_redirect_uri, :o_auth_scopes

    def o_auth_token
      if @o_auth_token.is_a? OAuthToken
        OAuthToken.from_hash @o_auth_token.to_hash
      else
        @o_auth_token
      end
    end

    class << self
      attr_reader :environments
    end

    def initialize(connection: nil, adapter: :net_http_persistent, timeout: 60,
                   max_retries: 0, retry_interval: 1, backoff_factor: 2,
                   retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                   retry_methods: %i[get put], http_callback: nil,
                   environment: Environment::PRODUCTION,
                   o_auth_client_id: 'TODO: Replace',
                   o_auth_redirect_uri: 'TODO: Replace', o_auth_token: nil,
                   o_auth_scopes: nil)

      super connection: connection, adapter: adapter, timeout: timeout,
            max_retries: max_retries, retry_interval: retry_interval,
            backoff_factor: backoff_factor, retry_statuses: retry_statuses,
            retry_methods: retry_methods, http_callback: http_callback

      # Current API environment
      @environment = String(environment)

      # OAuth 2 Client ID
      @o_auth_client_id = o_auth_client_id

      # OAuth 2 Redirection endpoint or Callback Uri
      @o_auth_redirect_uri = o_auth_redirect_uri

      # Object for storing information about the OAuth token
      @o_auth_token = if o_auth_token.is_a? OAuthToken
                        OAuthToken.from_hash o_auth_token.to_hash
                      else
                        o_auth_token
                      end

      # TODO: Replace
      @o_auth_scopes = o_auth_scopes

      # The Http Client to use for making requests.
      set_http_client CoreLibrary::FaradayClient.new(self)
    end

    def clone_with(connection: nil, adapter: nil, timeout: nil,
                   max_retries: nil, retry_interval: nil, backoff_factor: nil,
                   retry_statuses: nil, retry_methods: nil, http_callback: nil,
                   environment: nil, o_auth_client_id: nil,
                   o_auth_redirect_uri: nil, o_auth_token: nil,
                   o_auth_scopes: nil)
      connection ||= self.connection
      adapter ||= self.adapter
      timeout ||= self.timeout
      max_retries ||= self.max_retries
      retry_interval ||= self.retry_interval
      backoff_factor ||= self.backoff_factor
      retry_statuses ||= self.retry_statuses
      retry_methods ||= self.retry_methods
      http_callback ||= self.http_callback
      environment ||= self.environment
      o_auth_client_id ||= self.o_auth_client_id
      o_auth_redirect_uri ||= self.o_auth_redirect_uri
      o_auth_token ||= self.o_auth_token
      o_auth_scopes ||= self.o_auth_scopes

      Configuration.new(connection: connection, adapter: adapter,
                        timeout: timeout, max_retries: max_retries,
                        retry_interval: retry_interval,
                        backoff_factor: backoff_factor,
                        retry_statuses: retry_statuses,
                        retry_methods: retry_methods,
                        http_callback: http_callback, environment: environment,
                        o_auth_client_id: o_auth_client_id,
                        o_auth_redirect_uri: o_auth_redirect_uri,
                        o_auth_token: o_auth_token,
                        o_auth_scopes: o_auth_scopes)
    end

    # All the environments the SDK can run in.
    ENVIRONMENTS = {
      Environment::PRODUCTION => {
        Server::SERVER1 => 'https://petstore.swagger.io/v2',
        Server::SERVER2 => 'http://petstore.swagger.io/v2',
        Server::AUTH_SERVER => 'https://petstore.swagger.io/oauth'
      }
    }.freeze

    # Generates the appropriate base URI for the environment and the server.
    # @param [Configuration::Server] server The server enum for which the base URI is
    # required.
    # @return [String] The base URI.
    def get_base_uri(server = Server::SERVER1)
      ENVIRONMENTS[environment][server].clone
    end
  end
end
